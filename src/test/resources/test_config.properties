### HSQL TARGET DB CONFIGURATIONS
#target.JdbcPath      = jdbc:hsqldb:hsql://localhost:9002/test2
#target.Driver        = org.hsqldb.jdbcDriver
#target.Sql           = INSERT INTO tblOutputDocs (srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  gateJson) VALUES (:srcColumnFieldName, :srcTableName, :primaryKeyFieldName, :primaryKeyFieldValue, :updateTime,  :gateJson)
#target.validationQuery = SELECT * FROM tblOutputDocs
#target.validationQueryFields = srcColumnFieldName,srcTableName,primaryKeyFieldName,primaryKeyFieldValue,updateTime
#
#
#
### HSQL SOURCE DB CONFIGURATIONS
#source.JdbcPath      = jdbc:hsqldb:hsql://localhost:9001/test
#source.Driver        = org.hsqldb.jdbcDriver
#source.Sql           = SELECT srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  xhtml FROM tblInputDocs 
#


## POSTGRES TARGET DB CONFIGURATIONS
target.JdbcPath      = jdbc:postgresql://172.17.0.2:5432/minicogs
target.Driver        = org.postgresql.Driver
target.validationQuery = SELECT * FROM tblOutputDocs
target.validationQueryFields = srcColumnFieldName,srcTableName,primaryKeyFieldName,primaryKeyFieldValue,updateTime
target.username      = postgres
target.password      = mysecretpassword

## SOURCE TARGET DB CONFIGURATIONS
source.JdbcPath      = jdbc:postgresql://172.17.0.2:5432/minicogs
source.Driver        = org.postgresql.Driver
source.username      = postgres
source.password      = mysecretpassword



##paging item reader
source.pageSize = 2
source.fromClause = FROM tblInputDocs 


## paging item reader gate
#source.selectClause = SELECT srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  xhtml
#source.sortKey = primaryKeyFieldValue
#source.Sql           = SELECT srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  xhtml FROM tblInputDocs 
#target.Sql           = INSERT INTO tblOutputDocs (srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  gateJson) VALUES (:srcColumnFieldName, :srcTableName, :primaryKeyFieldName, :primaryKeyFieldValue, :updateTime,  :gateJson)

## paging item reader line fixer
#source.selectClause = SELECT doc_id, line_id, line_text
source.selectClause = SELECT distinct doc_id
source.sortKey = doc_id
#source.Sql           = SELECT distinct doc_id  FROM tblInputDocs 
target.Sql           = INSERT INTO tblOutputDocs (DOC_ID, LINE_TEXT_CONCAT)  VALUES (CAST(:documentKey AS integer) , :lineContents)


 

chunkSize = 5

# DB field names
otherFieldsList = srcColumnFieldName,srcTableName,primaryKeyFieldName,primaryKeyFieldValue,updateTime,xhtml
textFieldName = xhtml

# GateConfig
gateHome    = /home/rich/GATE_Developer_8.1
poolSize    = 4
gateApp     = /home/rich/GATE_Developer_8.1/plugins/ANNIE/ANNIE_with_defaults.gapp

gateAnnotationSets = Person

concurrencyLimit = 2
fetchSize = 100
maxRows = 100
throttleLimit = 4



#for partitioning with GATE
#columntoPartition = ID
#tableToPartition = tblInputDocs
#for DBLineFixer
documentKeyName = doc_id
lineKeyName = line_id
lineContents = line_text
tableName = tblinputdocs

#for partitioning with lineFixer
columntoPartition = doc_id
tableToPartition = tblInputDocs


##Configure partitionHandler
gridSize = 4
partitionHandlerTimeout = 100000
stepName = dbLineFixerSlaveStep
replyChannel = 
jmsIP = tcp://172.17.0.3:61616
jmsUsername = admin
jmsPassword = your_password


#example launch 
#java -cp "target/dependency-jars/*:target/your-project.jar" 
#org.springframework.batch.core.launch.support.CommandLineJobRunner 
#spring/batch/jobs/job-read-files.xml dBLineFixerJob date=testing.cvs