#####JOB AND STEP CONFIGURATION####
# commit interval in step
chunkSize = 50
#number of exceptions that can be thrown before job fails.
skipLimit = 5

#Asynchonous TaskExecutor Thread pool size - for multithreading partitions
concurrencyLimit = 16

# DB column label mapping for metadata
srcTableName = srctablename
srcColumnFieldName = srcColumnFieldName
primaryKeyFieldName = primaryKeyFieldName
primaryKeyFieldValue = primaryKeyFieldValue
timeStamp = updateTime

#job should complete before this many ms or it will fail
jobTimeout = 10000000

#globally unique job name
jobName = aJob

#since some JDBC drivers don't support socket timeouts, they can't detect network failures.
#This workaround allows us to specify a global socket timeout for the JVM without diving into the OS socket configuration.
#However, the downside is that all sockets are affected in the JVM, so may not always be appropriate to set this. Comment out to
#not use this global setting
globalSocketTimeout = 30000

#number of partitions to generate
gridSize = 3

#ms for partition handler to complete partitioning before an exception is thrown
partitionHandlerTimeout = 10000000

#name of timestamp colum used for checking for new data
timeStampColumnNameToPersistInJobRepository = updateTime

#ms to scan forward for new data
#processingPeriod = 345600000

#if configured, overrides the grid size and sets the max number of rows per partition.
#Warning - if used, can result in large numbers of partitions per job
#maxPartitionSize = 1000

#if configured, queries the source database to ensure that each partition has at least 1 row of data.
#Helpful to avoid masses of empty partitions when connecting to a database with non-sequestial primary keys. However, also
#requires a count query to be performed, which might not always be desirable
#checkForEmptyPartitions = false