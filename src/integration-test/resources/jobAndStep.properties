#####JOB AND STEP CONFIGURATION####
# commit interval in step - process this many rows before committing results. default 50
step.chunkSize = 50
#number of exceptions that can be thrown before job fails. default 5
step.skipLimit = 5

#Asynchonous TaskExecutor Thread pool size - for multithreading partitions
step.concurrencyLimit = 8

#job should complete before this many ms or it will be listed as a failure.
job.jobTimeout = 10000000

#globally unique job name. default is defaultJob
job.jobName = exampleJob

#since some JDBC drivers don't support socket timeouts, they can't detect network failures.
#This workaround allows us to specify a global socket timeout for the JVM without diving into the OS socket configuration.
#However, the downside is that all sockets are affected in the JVM, so may not always be appropriate to set this. Comment out to
#not use this global setting
job.globalSocketTimeout = 30000



#Partitioner Configuration. This is used to inform how the total row count per job should be broken into
#seperate partitions

#Two partitioner types are available, either using primary keys (PK) or timestamps and primary keys (PKTimeStamp)
#If using the scheduler, the PKTimeStamp type should be configured
partitioner.partitionType = PKTimeStamp

#number of partitions to generate (x / total job row count)
partitioner.gridSize = 3

#ms for partition handler to complete partitioning before an exception is thrown
partitioner.partitionHandlerTimeout = 10000000

#name of timestamp column used for partitioning and checking for new data (only if scheduling is used)
partitioner.timeStampColumnName = updateTime

#name of PK column used for partitioning and checking for new data
#only use with scheduling if PKs are guaranteed to be generated sequentially
partitioner.pkColumnName = primaryKeyFieldValue

#this is the table containing the primary keys and optionally, timestamps
partitioner.tableToPartition = tblInputDocs

# required prefix on some types of DB (e.g. SQL Server)
#partitioner.preFieldsSQL = TOP 100 PERCENT