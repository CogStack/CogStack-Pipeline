# EXAMPLE CONFIG FOR dBLineFixerJob 
#Elasticsearch configuration
elasticsearch.cluster.name = elasticsearch
elasticsearch.cluster.host =  127.0.0.1
elasticsearch.cluster.port = 9300
elasticsearch.shield.enabled = false
elasticsearch.shield.user = <user>:<password>
elasticsearch.shield.ssl.keystore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.keystore.password = <password>
elasticsearch.shield.ssl.truststore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.truststore.password = <password>
elasticsearch.shield.transport.ssl = true
elasticsearch.index.name = test_index2
elasticsearch.type = test_type
elasticsearch.response.timeout = 1000000
#do not index these column labels if detected
elasticsearch.excludeFromIndexing = binaryContent,primaryKeyFieldName

datePatternForES = yyyy-MM-dd'T'HH:mm:ss.SSS
#for DBLineFixer - concatenate text from multiple database rows
# primary key of document
lf.documentKeyName = primaryKeyFieldValue
lf.lineKeyName = line_id
lf.lineContents = line_text
#source table of lines
lf.srcTableName = tblDocLines

# fieldname for lineFixer output
dbLineFixerFieldName = lineFixer

#select profiles to activate various ItemProcessor/ItemWriter Beans
spring.profiles.active=dBLineFixer,remotePartitioning,jdbc,elasticsearch,primaryKeyPartition
##JMS config
jmsIP = tcp://172.17.0.3:61616?jms.prefetchPolicy.all=1
jmsUsername = admin
jmsPassword = your_password
##timeout to prevent a hung client
closeTimeout = 100000
#Elasticsearch configuration
elasticsearch.cluster.name = elasticsearch
elasticsearch.cluster.host =  127.0.0.1
elasticsearch.cluster.port = 9300
elasticsearch.shield.enabled = false
elasticsearch.shield.user = <user>:<password>
elasticsearch.shield.ssl.keystore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.keystore.password = <password>
elasticsearch.shield.ssl.truststore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.truststore.password = <password>
elasticsearch.shield.transport.ssl = true
elasticsearch.index.name = test_index2
elasticsearch.type = test_type
elasticsearch.response.timeout = 1000000
#do not index these column labels if detected
elasticsearch.excludeFromIndexing = binaryContent,primaryKeyFieldName

datePatternForES = yyyy-MM-dd'T'HH:mm:ss.SSS
# commit interval in step
chunkSize = 50
#number of exceptions that can be thrown before job fails.
skipLimit = 0

#Asynchonous TaskExecutor Thread pool size - for multithreading partitions
concurrencyLimit = 4

# DB column label mapping for metadata
srcTableName = srctablename
srcColumnFieldName = srcColumnFieldName
primaryKeyFieldName = primaryKeyFieldName
primaryKeyFieldValue = primaryKeyFieldValue
timeStamp = updateTime

#job should complete before this many ms or it will fail
jobTimeout = 100000
#since some JDBC drivers don't support socket timeouts, they can't detect network failures.
#This workaround allows us to specify a global socket timeout for the JVM without diving into the OS socket configuration.
#However, the downside is that all sockets are affected in the JVM, so may not always be appropriate to set this. Comment out to
#not use this global setting
globalSocketTimeout = 30000
#JTDS now obsolete due to JDBC4.0
### SQL SERVER TARGET DB CONFIGURATIONS
#target.JdbcPath      = jdbc:jtds:sqlserver://192.168.1.7:1433/minicogs
#target.Driver        = net.sourceforge.jtds.jdbc.Driver
#target.username      = sqlserver
#target.password      = mysecretpassword
#target.connectionValidationQuery = SELECT CASE WHEN DATABASEPROPERTYEX('minicogs', 'Status') = 'ONLINE' THEN 1 END
#
### SOURCE TARGET DB CONFIGURATIONS
#source.JdbcPath      = jdbc:jtds:sqlserver://192.168.1.7:1433/minicogs
#source.Driver        = net.sourceforge.jtds.jdbc.Driver
#source.username      = sqlserver
#source.password      = mysecretpassword
#source.connectionValidationQuery = SELECT CASE WHEN DATABASEPROPERTYEX('minicogs', 'Status') = 'ONLINE' THEN 1 END

## SQL SERVER TARGET DB CONFIGURATIONS
target.JdbcPath      = jdbc:sqlserver://192.168.1.110:1433;DatabaseName=minicogs
target.Driver        = com.microsoft.sqlserver.jdbc.SQLServerDriver
target.username      = sqlserver
target.password      = mysecretpassword
target.idleTimeout   = 30000
target.maxLifetime   = 60000

## SOURCE TARGET DB CONFIGURATIONS
source.JdbcPath      = jdbc:sqlserver://192.168.1.110:1433;DatabaseName=minicogs
source.Driver        = com.microsoft.sqlserver.jdbc.SQLServerDriver
source.username      = sqlserver
source.password      = mysecretpassword
source.idleTimeout   = 30000
source.maxLifetime   = 60000

#JobRepo DB config
jobRepository.JdbcPath      = jdbc:sqlserver://192.168.1.110:1433;DatabaseName=jobrepo
jobRepository.Driver        = com.microsoft.sqlserver.jdbc.SQLServerDriver
jobRepository.username      = sqlserver
jobRepository.password      = mysecretpassword
jobRepository.idleTimeout   = 30000
jobRepository.maxLifetime   = 60000

datePatternForScheduling = yyyy-MM-dd HH:mm:ss.S
dbmsToJavaSqlTimestampType = DATETIME



## Job and step Name
jobName =   dBLineFixerJob
# line fixer IO queries
target.Sql           = INSERT INTO dbo.tblOutputDocs (srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  LINE_TEXT_CONCAT) VALUES (:srcColumnFieldName, :srcTableName, :primaryKeyFieldName, CAST( :primaryKeyFieldValue AS integer) , :timeStamp,  :outputData)
#currently not used
target.validationQuery = SELECT * FROM dbo.tblOutputDocs

## paging item reader line fixer
source.selectClause = SELECT srcColumnFieldName, srcTableName, primaryKeyFieldName,  primaryKeyFieldValue , updateTime
source.sortKey = primaryKeyFieldValue
##paging item reader
source.pageSize = 2
source.fromClause = FROM dbo.tblInputDocs

#for partitioning
#if the step target table has a different alias to the partition table
columnToProcess = primaryKeyFieldValue
#this is the table containing the primary keys and timestamps
tableToPartition = tblInputDocs
pkColumnNameToPartition = primaryKeyFieldValue
timeStampColumnNameToPersistInJobRepository = updateTime

##Configure partitionHandler
gridSize = 4
partitionHandlerTimeout = 100000
requestQueueName = lineFixerReqChannel
replyQueueName = lineFixerReplyQueue
##needed for some dbms
partitionerPreFieldsSQL = TOP 100 PERCENT
#partitionerPostOrderByClause = limit 10
