# EXAMPLE CONFIG FOR dBLineFixerJob 
elasticsearch.cluster.name = elasticsearch
elasticsearch.cluster.host =  127.0.0.1
elasticsearch.cluster.port = 9300
elasticsearch.shield.enabled = false
elasticsearch.shield.user = <user>:<password>
elasticsearch.shield.ssl.keystore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.keystore.password = <password>
elasticsearch.shield.ssl.truststore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.truststore.password = <password>
elasticsearch.shield.transport.ssl = true
elasticsearch.index.name = test_index2
elasticsearch.type = test_type
elasticsearch.response.timeout = 1000000
#do not index these fields if detected
elasticsearch.excludeFromIndexing = body
elasticsearch.processedFieldName = output

datePatternForES = yyyy-MM-dd'T'HH:mm:ss.SSS
#for DBLineFixer
# primary key of document
lf.documentKeyName = primaryKeyFieldValue
lf.lineKeyName = line_id
lf.lineContents = line_text
#source table of lines
lf.srcTableName = tblDocLines
jobClass = testLineFixerExecution


# fieldname for lineFixer output
dbLineFixerFieldName = lineFixer

##JMS config
jmsIP = tcp://172.17.0.3:61616?jms.prefetchPolicy.all=1
jmsUsername = admin
jmsPassword = your_password

elasticsearch.cluster.name = elasticsearch
elasticsearch.cluster.host =  127.0.0.1
elasticsearch.cluster.port = 9300
elasticsearch.shield.enabled = false
elasticsearch.shield.user = <user>:<password>
elasticsearch.shield.ssl.keystore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.keystore.password = <password>
elasticsearch.shield.ssl.truststore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
elasticsearch.shield.ssl.truststore.password = <password>
elasticsearch.shield.transport.ssl = true
elasticsearch.index.name = test_index2
elasticsearch.type = test_type
elasticsearch.response.timeout = 1000000
#do not index these fields if detected
elasticsearch.excludeFromIndexing = body
elasticsearch.processedFieldName = output

datePatternForES = yyyy-MM-dd'T'HH:mm:ss.SSS
jobClass = testBasicExecution
# commit interval in step
chunkSize = 5000
skipLimit = 0
useTimeStampBasedScheduling = false

#Asynchonous TaskExecutor Thread pool size
concurrencyLimit = 4

# DB field names for metadata
srcTableName = srctablename
srcColumnFieldName = srcColumnFieldName
primaryKeyFieldName = primaryKeyFieldName
primaryKeyFieldValue = primaryKeyFieldValue
timeStamp = updateTime

## scheduling (Cron style syntax)
scheduler.rate = */5 * * * * *
#ms to scan forward for new data, from last successful job
processingPeriod = 8640000000
#Specify a start timestamp in ms, for restarting at a given point. See joda docs.
datePatternForSQL = yyyy-MM-dd HH:mm:ss.S
#firstJobStartDate = 2016-05-10 10:23:31.2

## Total timeout for complete job (set high for long running jobs!)
jobTimeout = 10000

## POSTGRES TARGET DB CONFIGURATIONS
target.JdbcPath      = jdbc:postgresql://172.17.0.2:5432/minicogs
target.Driver        = org.postgresql.Driver
target.username      = postgres
target.password      = mysecretpassword
target.connectionValidationQuery = SELECT 1

## SOURCE TARGET DB CONFIGURATIONS
source.JdbcPath      = jdbc:postgresql://172.17.0.2:5432/minicogs
source.Driver        = org.postgresql.Driver
source.username      = postgres
source.password      = mysecretpassword
source.connectionValidationQuery = SELECT 1

datePatternForScheduling = yyyy-MM-dd HH:mm:ss.S
dbmsToJavaSqlTimestampType = TIMESTAMP




## Job and step Name
jobName =   dBLineFixerJob
stepName = dBLineFixerSlaveStep

# line fixer IO queries
target.Sql           = INSERT INTO tblOutputDocs (srcColumnFieldName, srcTableName, primaryKeyFieldName, primaryKeyFieldValue, updateTime,  LINE_TEXT_CONCAT) VALUES (:srcColumnFieldName, :srcTableName, :primaryKeyFieldName, CAST( :primaryKeyFieldValue AS integer) , :timeStamp,  :outputData)
#currently not used
target.validationQuery = SELECT * FROM tblOutputDocs

## paging item reader line fixer
source.selectClause = SELECT distinct srcColumnFieldName, srcTableName, primaryKeyFieldName,  primaryKeyFieldValue , updateTime
source.sortKey = primaryKeyFieldValue
##paging item reader
source.pageSize = 2
source.fromClause = FROM tblInputDocs 

#for partitioning
#if the step target table has a different alias to the partition table
columnToProcess = primaryKeyFieldValue
#this is the table containing the primary keys and timestamps
tableToPartition = tblInputDocs
pkColumnNameToPartition = primaryKeyFieldValue
timeStampColumnNameToPartition = updateTime

##Configure partitionHandler
gridSize = 4
partitionHandlerTimeout = 100000
requestQueueName = lineFixerReqChannel
replyQueueName = lineFixerReplyQueue
##needed for some dbms
#partitionerPreFieldsSQL =
#partitionerPostOrderByClause = limit 10


#for build/testing
spring.profiles.active=dBLineFixer,master,slave,jdbc,elasticsearch
