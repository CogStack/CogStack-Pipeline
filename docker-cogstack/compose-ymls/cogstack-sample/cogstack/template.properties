#####Elasticsearch CONFIGURATION####
#ES cluster name
elasticsearch.cluster.name = elasticsearch
#ES cluster IP/hostname
elasticsearch.cluster.host =  elasticsearch
#ES cluster transport port
elasticsearch.cluster.port = 9200

#ES basic auth from X-pack security plugin (commercial)
elasticsearch.security.enabled = false
#for Http auth
elasticsearch.security.user = elastic
elasticsearch.security.password = changeme

#ES ssl from X-pack security plugin (commercial). Warning. passwords will be sent in plain text if
#ssl is not enabled
elasticsearch.ssl.enabled = false


#Shield username/password. Depreciated
#elasticsearch.shield.user = <user>:<password>
# Enable Shield. Depreciated
#elasticsearch.shield.enabled = false
#ES keystore for ssl
#elasticsearch.shield.ssl.keystore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
##ES keystore password
#elasticsearch.shield.ssl.keystore.password = <password>
##ES Truststore (see Shield docs)
#elasticsearch.shield.ssl.truststore.path = /home/rich/elk/ssh-keystores/tempnode/tempnode.jks
##ES Truststore password
#elasticsearch.shield.ssl.truststore.password = <password>
##use encryption on transport layer
#elasticsearch.shield.transport.ssl = true

##General ES options
#load data into this index
elasticsearch.index.name = sample_@VIEW_NAME@
#load data into this type
elasticsearch.type = doc
#Allow this many ms for cluster response
elasticsearch.response.timeout = 1000000
#If the input SQL query returns columns with these labels, ignore them
elasticsearch.excludeFromIndexing = binaryContent,cog_pk_field_name,cog_src_field_name,cog_src_table_name

#specify the JODA date pattern that is compatible with the elasticsearch dynamic file mapping for dates (see ES docs on dates)
elasticsearch.datePattern = yyyy-MM-dd'T'HH:mm:ss.SSS
#####JOB AND STEP CONFIGURATION####
# commit interval in step - process this many rows before committing results. default 50
step.chunkSize = 50
#number of exceptions that can be thrown before job fails. default 5
step.skipLimit = 5

#Asynchonous TaskExecutor Thread pool size - for multithreading partitions
step.concurrencyLimit = 2

#job should complete before this many ms or it will be listed as a failure.
job.jobTimeout = 10000000

#globally unique job name. default is defaultJob
job.jobName = job_@VIEW_NAME@

#since some JDBC drivers don't support socket timeouts, they can't detect network failures.
#This workaround allows us to specify a global socket timeout for the JVM without diving into the OS socket configuration.
#However, the downside is that all sockets are affected in the JVM, so may not always be appropriate to set this. Comment out to
#not use this global setting
job.globalSocketTimeout = 30000



## Partitioner Configuration. This is used to inform how the total row count per job should be broken into
## seperate partitions
##
##
#Two partitioner types are available, either using primary keys (PK) or timestamps and primary keys (PKTimeStamp)
#If using the scheduler, the PKTimeStamp type should be configured
partitioner.partitionType = PKTimeStamp

#number of partitions to generate (x / total job row count)
partitioner.gridSize = 1

#ms for partition handler to complete partitioning before an exception is thrown
partitioner.partitionHandlerTimeout = 10000000

#name of timestamp column used for partitioning and checking for new data (only if scheduling is used)
partitioner.timeStampColumnName = cog_update_time

#name of PK column used for partitioning and checking for new data
#only use with scheduling if PKs are guaranteed to be generated sequentially
partitioner.pkColumnName = cog_pk

#this is the table containing the primary keys and optionally, timestamps
partitioner.tableToPartition = @VIEW_NAME@ 
# or patients ???


# required prefix on some types of DB (e.g. SQL Server)
#partitioner.preFieldsSQL = TOP 100 PERCENT
##For meaning of ideTimeout and maxLifetime see Hikari Connection Pool docs


## POSTGRES TARGET DB CONFIGURATIONS
##
##
target.JdbcPath      = jdbc:postgresql://sampledb:5432/db_sample
target.Driver        = org.postgresql.Driver
target.username      = test
target.password      = test
target.idleTimeout   = 30000
target.maxLifetime   = 60000


## SOURCE TARGET DB CONFIGURATIONS
##
##
source.JdbcPath      = jdbc:postgresql://sampledb:5432/db_sample
source.Driver        = org.postgresql.Driver
source.username      = test
source.password      = test
source.idleTimeout   = 30000
source.maxLifetime   = 60000
source.leakDetectionThreshold = 0

# number of allocated connections to source DB (kept until the end of processing)
source.poolSize = 10
# psql -U postgres -c 'select count(*) from pg_stat_activity;'


## Job Repo DB CONFIGURATIONS
##
##
jobRepository.JdbcPath      = jdbc:postgresql://postgres:5432/cogstack
jobRepository.Driver        = org.postgresql.Driver
jobRepository.username      = cogstack
jobRepository.password      = mysecretpassword
jobRepository.idleTimeout   = 30000
jobRepository.maxLifetime   = 60000

#Since different DBMS products interpret the SQL standard for time differently, is is necessary to explicitly specify
#the date type that the database is using. E.G. postgres=TIMESTAMP, SQL SERVER=DATETIME
source.dbmsToJavaSqlTimestampType = TIMESTAMP


#The principle SQL block that specifies data to process. Composed of three parts.
source.selectClause = SELECT *
source.sortKey = cog_pk
source.fromClause = FROM @VIEW_NAME@


#If writing the cogstack constructed JSON to another DBMS as well as elasticsearch, this query specifies how it should be handled
target.Sql = INSERT INTO tblOutputDocs (cog_src_field_name, cog_src_table_name, cog_pk_field_name, cog_pk, cog_update_time, output) VALUES (:cog_src_field_name, :cog_src_table_name, :cog_pk_field_name, CAST ( :cog_pk AS integer), :timeStamp, :outputData)


##paging item reader configuration
#number of rows per page
source.pageSize = 2

## DB column label mapping for table metadata. Required.
##
##
source.srcTableName = cog_src_table_name
source.srcColumnFieldName = cog_src_field_name
source.primaryKeyFieldName = cog_pk_field_name
source.primaryKeyFieldValue = cog_pk
source.timeStamp = cog_update_time


#for DBLineFixer - concatenate text from multiple database rows
# primary key of original document
#lf.documentKeyName = primaryKeyFieldValue
# primary key from table with multi row documents
#lf.lineKeyName = line_id
# text content from table with multi row documents
#lf.lineContents = line_text
#source table of multi row documents
#lf.srcTableName = tblDocLines
# fieldname for lineFixer output
#lf.fieldName = lineFixer

## Scheduler CONFIGURATION
##
##
#if true, run a new job after the last one has finished - new jobs will continute to be created indefinitely
scheduler.useScheduling = false
## if above is true, new jobs will be created according to this CRON style schedule
scheduler.rate = */5 * * * * *

#if useTimeStampBasedScheduling is true, process this number of milliseconds from last successful job/first timestamp/start date,
#depending on configuration and status of the JobRepository. For instance, last timestamp in job1 is t0. job2 will then look for
#new data where t0 < timestamp <= t0+processingPeriod. Defaults to 77760000000 ms (9000 days)
scheduler.processingPeriod = 777600000000

spring.profiles.active=localPartitioning,jdbc_in,elasticsearchRest,postgres