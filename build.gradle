buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
    }
}
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'

sourceSets {
    main {
        java { srcDirs = [] }
        groovy {
            srcDirs = ['src/main/java','src/main/groovy']
        }
        resources {
            srcDir 'src/main/resources'
        }

    }
    test {
        java { srcDirs = [] }
        groovy {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ['src/test/resources']
        }

    }
    integTest {
        java { srcDirs = [] }
        groovy {
            srcDirs = ["src/integration-test/java"]
        }
        resources {
            srcDirs = ['src/integration-test/resources']
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
    }
}



test {
    // enable TestNG support (default is JUnit)
    //useTestNG()

    // set a system property for the test JVM(s)
    //systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    //include 'org/foo/**'
    //exclude 'org/boo/**'

    // show standard out and standard error of the test JVM(s) on the console
    //testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "1G"

    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
//  onOutput { descriptor, event ->
//     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//  }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}



jar {
    baseName = 'turbo-laser'
    version =  '0.3.0'
}

if (!hasProperty('mainClass')) {
    //ext.mainClass = 'org.springframework.batch.core.launch.support.CommandLineJobRunner'
    ext.mainClass = 'uk.ac.kcl.Main'
}
repositories {
    mavenCentral()
    //needed for locallyinstalled jdbc4 from microsoft
    mavenLocal()
    maven{
        url "https://maven.elasticsearch.org/releases"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
//    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.21'
//    compile group: 'org.slf4j', name: 'slf4j-jcl', version: '1.7.21'
//    compile 'org.slf4j:slf4j-log4j12:1.7.21'

    //compile 'log4j:log4j:1.2.17'
    compile 'joda-time:joda-time:2.9.3'
    compile "org.elasticsearch.plugin:shield:2.3.3"
    compile 'org.elasticsearch:elasticsearch:2.3.3'
    compile("org.springframework:spring-web")
    compile("org.hsqldb:hsqldb")
    compile 'org.hsqldb:hsqldb:2.3.3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    //switch for ms driver
    //compile files('libs/sqljdbc42.jar')
    compile ('com.microsoft.sqlserver:sqljdbc42:4.2')
    compile 'net.sourceforge.jtds:jtds:1.3.1'
    compile group: 'org.springframework', name: 'spring-web', version: '4.2.6.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile ('org.springframework.batch:spring-batch-core:3.0.7.RELEASE')
    compile ('org.springframework.batch:spring-batch-integration:3.0.7.RELEASE')
    compile ('org.springframework:spring-core:4.2.6.RELEASE')
    compile ('org.springframework:spring-test:4.2.6.RELEASE')
    compile ('org.springframework:spring-jdbc:4.2.6.RELEASE')
    compile ('org.springframework:spring-context:4.2.6.RELEASE')
    compile ('org.springframework:spring-jms:4.2.6.RELEASE')
    compile ('org.springframework.integration:spring-integration-core:4.2.6.RELEASE')
    compile ('org.springframework.integration:spring-integration-core:4.2.6.RELEASE')
    compile ('org.springframework.integration:spring-integration-jms:4.2.6.RELEASE')
    //compile 'commons-dbcp:commons-dbcp:1.4'
    //compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.4.6'
    compile 'commons-io:commons-io:2.4'
    compile 'org.postgresql:postgresql:9.4-1205-jdbc42'
    compile 'org.springframework.batch:spring-batch-docs:1.1.4.RELEASE'
    compile 'org.springframework.integration:spring-integration-java-dsl:1.1.2.RELEASE'
    compile 'org.apache.activemq:activemq-core:5.7.0'
    compile 'org.apache.activemq:activemq-spring:5.13.0'
    compile 'org.apache.tika:tika-core:1.11'
    compile ('org.apache.tika:tika-parsers:1.11'){
        exclude group: 'commons-logging', module: 'commons-logging' //by both name and group
    }

    //nlp
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile 'org.codehaus.groovy:groovy-all:2.4.4'
    compile 'uk.ac.gate:gate-core:8.1'
    compile 'xml-apis:xml-apis:1.4.01'
    //test
    testCompile("junit:junit")
    testCompile('org.mockito:mockito-all:1.10.19');
    testCompile group: 'de.sven-jacobs', name: 'loremipsum', version: '1.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

task writeExampleConfigs  {
    //profiles
    String basicPKAndTimeStampProfiles = new File("src/integration-test/resources/basicPKAndTimeStampProfiles.properties").text
    String basicPKprofiles = new File("src/integration-test/resources/basicPKprofiles.properties").text
    String dbLineFixerPKprofiles = new File("src/integration-test/resources/dbLineFixerPKprofiles.properties").text
    String deidPKprofiles = new File("src/integration-test/resources/deidPKprofiles.properties").text
    String gatePKprofiles = new File("src/integration-test/resources/gatePKprofiles.properties").text
    String tikaPKprofiles = new File("src/integration-test/resources/tikaPKprofiles.properties").text
    String reindexPKprofiles = new File("src/integration-test/resources/reindexPKprofiles.properties").text
    String biolarkPKprofiles = new File("src/integration-test/resources/biolarkPKprofiles.properties").text

    //ItemProcessors
    String deidentification = new File("src/integration-test/resources/deidentification.properties").text
    String tika = new File("src/integration-test/resources/tika.properties").text
    String gate = new File("src/integration-test/resources/gate.properties").text
    String dBLineFixer = new File("src/integration-test/resources/dBLineFixer.properties").text

    //Database connectivity
    String postgres_db = new File("src/integration-test/resources/postgres_db.properties").text
    String sql_server_db = new File("src/integration-test/resources/sql_server_db.properties").text

    //ItemWriters
    String elasticsearch = new File("src/integration-test/resources/elasticsearch.properties").text

    //Job and Step
    String jobAndStep = new File("src/integration-test/resources/jobAndStep.properties").text

    //JMS
    String jms = new File("src/integration-test/resources/jms.properties").text

    //configured start
    String configuredStart = new File("src/integration-test/resources/configured_start.properties").text

    //Scheduling
    String scheduling = new File("src/integration-test/resources/scheduling.properties").text

    String postgres_test_config_gate = new File("src/integration-test/resources/postgres_test_config_gate.properties").text
    String postgres_test_config_tika = new File("src/integration-test/resources/postgres_test_config_tika.properties").text
    String postgres_test_config_basic = new File("src/integration-test/resources/postgres_test_config_basic.properties").text
    String postgres_test_config_dBLineFixer = new File("src/integration-test/resources/postgres_test_config_line_fixer.properties").text

    String sql_server_test_config_gate = new File("src/integration-test/resources/sql_server_test_config_gate.properties").text
    String sql_server_test_config_tika = new File("src/integration-test/resources/sql_server_test_config_tika.properties").text
    String sql_server_test_config_basic = new File("src/integration-test/resources/sql_server_test_config_basic.properties").text
    String sql_server_test_config_dBLineFixer = new File("src/integration-test/resources/sql_server_test_config_line_fixer.properties").text
    String sql_server_test_config_deid = new File("src/integration-test/resources/sql_server_test_config_deid.properties").text
    String sql_server_test_config_reindex = new File("src/integration-test/resources/sql_server_test_config_reindex.properties").text
    String sql_server_test_config_biolark = new File("src/integration-test/resources/sql_server_test_config_biolark.properties").text

    new File("exampleConfigs").mkdir()
    def gateExample = new File("exampleConfigs/gateJob.properties")
    gateExample.withWriter("UTF-8") { writer ->
        writer.write(  "# EXAMPLE CONFIG FOR gateJob \n" +
                elasticsearch
                + "\n" + gate
                + "\n" + gatePKprofiles
                + "\n" + jms
                + "\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_gate
        )
    }
    def tikaExample = new File("exampleConfigs/tikaJob.properties")
    tikaExample.withWriter("UTF-8"){ writer ->
        writer.write ("# EXAMPLE CONFIG FOR tikaJob \n" +
                elasticsearch
                +"\n" + tika
                +"\n" + tikaPKprofiles
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_tika
        )
    }
    def basicExample = new File("exampleConfigs/basicJob.properties")
    basicExample.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR basicJob \n" +
                elasticsearch
                +"\n" + basicPKprofiles
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_basic
        )
    }
    def biolarkExample = new File("exampleConfigs/biolarkJob.properties")
    biolarkExample.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR basicJob \n" +
                elasticsearch
                +"\n" + biolarkPKprofiles
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_biolark
        )
    }
    def reindexExample = new File("exampleConfigs/reindexJob.properties")
    reindexExample.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR basicJob \n" +
                elasticsearch
                +"\n" + reindexPKprofiles
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_reindex
        )
    }
    def basicExample2 = new File("exampleConfigs/basicJob2.properties")
    basicExample2.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR basicJob with timestamp based processing, configured start date and scheduling on \n" +
                elasticsearch
                +"\n" + basicPKAndTimeStampProfiles
                +"\n" + scheduling
                +"\n" + configuredStart
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_basic
        )
    }

    def dBLineFixerExample = new File("exampleConfigs/dBLineFixerJob.properties")
    dBLineFixerExample.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR dBLineFixerJob \n" +
                elasticsearch
                +"\n" + dBLineFixer
                +"\n" + dbLineFixerPKprofiles
                +"\n" + jms
                +"\n" + elasticsearch
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_dBLineFixer
        )
    }

    def deidentificationExample = new File("exampleConfigs/deidJob.properties")
    deidentificationExample.withWriter("UTF-8"){ writer ->
        writer.write("# EXAMPLE CONFIG FOR deidentification Job \n" +
                elasticsearch
                +"\n" + deidPKprofiles
                +"\n" + deidentification
                +"\n" + jms
                +"\n" + jobAndStep
                + "\n" + sql_server_db
                + "\n" + sql_server_test_config_deid
        )
    }

}
